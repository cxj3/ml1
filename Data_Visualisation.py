import streamlit as st
import pandas as pd
import numpy as np
import scipy as stats
import matplotlib.pyplot as plt
import seaborn as sns

def app():
    st.title('Sales - Analysis and Visualization')
    st.subheader('By: Charissa Janto - Batch 09')
    st.markdown('Data Visualisation')


    ############### Import Data
    DATA_URL = ('/Users/charissa.janto/Desktop/Hactiv8/GitHub/Milestone/supermarket_sales - Sheet1.csv')

    @st.cache
    def load_data(nrows):
        df = pd.read_csv(DATA_URL)
        lowercase = lambda x: str(x).lower()
        df.rename(lowercase, axis='columns', inplace=True)
        return df

    # Create a text element and let the reader know the data is loading.
    data_load_state = st.text('Loading data...')
    # Load 10,000 rows of data into the dataframe.
    df = load_data(10000)
    # Notify the reader that the data was successfully loaded.
    data_load_state.text('Loading data...done!')

    if  st.checkbox('Show raw data'):
        st.subheader('Raw data')
        st.write(df)
        'This Dataset has 1000 rows and 17 columns, which consist of Invoice ID, Branch, City, Customer type, Gender, Product line, Unit price, Quantity, Tax 5%, Total, DateTime, Payment, cogs, gross margin percentage, gross income, Rating'


    ########Slider
    st.title("Streamlit Sliders")
    st.subheader('slide1')
    x= st.slider('A date between 0-100', )
    st.write('slider number:', x)

    







    ############ Column and rows
    baris1_col1,baris1_col2,baris1_col3 = st.columns((2,2,1))

    ############ Purchase in Cities
    st.subheader('Number of purchase in a particular City / Branch')
    st.bar_chart(df['city'].value_counts())

    'By looking at the data, we know that:'
    '- Yangon is branch A'
    '- Mandalay is branch B'
    '- Naypyitaw is branch C.'
    'From the search above we know that Yangon is the most active branch.'

    # Find Sum Gross Income from different Cities
    City_Gross_Income = df[['city','gross income']].groupby('city').sum()
    City_Gross_Income.sort_values(by='gross income', ascending=False,)


    # Plot Sum Gross Income from different Cities
    fig, ax = plt.subplots(figsize=(12, 12))
    City_Gross_Income.plot(kind='barh',color='steelblue',ax=ax)
    ax.set_xlabel('Sum of Gross Income')
    ax.set_title('Gross income in different cities')
    st.pyplot(fig)


    ############ Purchase of Product lines
    st.bar_chart(df['product line'].value_counts())

    #Find the sum of gross profit from each product line
    Product_Line_Gross_Income = df[['product line','gross income']].groupby('product line').sum()
    Product_Line_Gross_Income.sort_values(by='gross income', ascending=False,)

    ####### Plot Pie Sum Gross Income from each product line
    fig, ax = plt.subplots(figsize=(15, 6))

    colors_list = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen', 'pink']
    explode_list = [0.1, 0, 0, 0, 0.1, 0.1] # ratio for each continent with which to offset each wedge.

    Product_Line_Gross_Income['gross income'].plot(kind='pie',
                                autopct='%1.1f%%', 
                                startangle=90,    
                                shadow=True,       
                                labels=None,         # turn off labels on pie chart
                                pctdistance=1.12,    # the ratio between the center of each pie slice and the start of the text generated by autopct 
                                colors=colors_list,  # add custom colors
                                explode=explode_list, # 'explode' lowest 3 continents
                                ax=ax)

    # scale the title up by 12% to match pctdistance
    ax.set_title('Distribution of gross income by Product Line', y=1.12) 

    plt.axis('equal') 

    # add legend
    ax.legend(labels=Product_Line_Gross_Income.index, loc='upper left') 
    st.pyplot()

    st.set_option('deprecation.showPyplotGlobalUse', False)


    ##########Check Product lines distributions >< Rating
    Product_Line_Rating = df[['product line','rating']].groupby('product line').mean()
    Product_Line_Rating.sort_values(by='rating', ascending=False,)

    sns.boxenplot(y = 'product line', x = 'rating', data=df )
