    lowercase = lambda x: str(x).lower()
    df.rename(lowercase, axis='columns', inplace=True)
    df['date'] = pd.to_datetime(df['date']).dt.strftime('%d-%m-%y')


DATA_URL = ('/Users/charissa.janto/Desktop/Hactiv8/GitHub/Milestone/supermarket_sales - Sheet1.csv')
    
    @st.cache(allow_output_mutation=True)
    def load_data(nrows):
        df = pd.read_csv(DATA_URL, nrows=nrows)
        lowercase = lambda x: str(x).lower()
        df.rename(lowercase, axis='columns', inplace=True)
        df['date'] = pd.to_datetime(df['date'])
        return df

    # Create a text element and let the reader know the data is loading.
    data_load_state = st.text('Loading data...')
    # Load 10,000 rows of data into the dataframe.
    df = load_data(1000)
    # Notify the reader that the data was successfully loaded.
    data_load_state.text('Loading data...done!')

    if  st.checkbox('Show raw data'):
        st.subheader('Raw data')

    
    df['day'] = (df['date']).dt.day
    df['month'] = (df['date']).dt.month
    df['year'] = (df['date']).dt.year

    start_color, end_color = st.select_slider(
     'Select a range of color wavelength',
     options=['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'],
     value=('red', 'blue'))
    st.write('You selected wavelengths between', start_color, 'and', end_color)


    st.title("Slide to change dates")
    
    date_options = df['date']
    start_date, end_date = st.slider(
        'Select a range of date',
        options= date_options,
        value=('05-01-19','20-02-19'))
    st.write('slider range:', start_date, 'and', end_date)

    fig2 = px.bar(df, x=df['date'], y=df['gross income'], color=df['city'])
    fig2.update_layout(width=800)



    dates=df['date']
    st.write(dates)

    ########Slider
    date_options = df['date'].unique().tolist()
    Date = st.slider(
        'Which city do you want to pick?',
        date_options,
        min_value= 08-03-19, max_value=18-02-19,
        value=08-03-19)
    df = df[df['date']==Date]
    st.write(Date)



    city_options = df['city'].unique().tolist()
    city = st.multiselect(
        'Which city do you want to pick?',
        city_options, ['Yangon'],0)
    df['city'] = df[df['city']==city]



    st.write('**Number of gross income created by product lines**')
        #Find the sum of gross profit from each product line
        Product_Line_Gross_Income = df[['product line','gross income']].groupby('product line').sum()
        Product_Line_Gross_Income.sort_values(by='gross income', ascending=False,)

        ####### Plot Pie Sum Gross Income from each product line
        fig, ax = plt.subplots(figsize=(15, 6))

        
        colors_list = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen', 'pink']
        explode_list = [0.1, 0, 0, 0, 0.1, 0.1] # ratio for each continent with which to offset each wedge.

        Product_Line_Gross_Income['gross income'].plot(kind='pie',
                                    autopct='%1.1f%%', 
                                    startangle=90,    
                                    shadow=True,       
                                    labels=None,         # turn off labels on pie chart
                                    pctdistance=1.12,    # the ratio between the center of each pie slice and the start of the text generated by autopct 
                                    colors=colors_list,  # add custom colors
                                    explode=explode_list, # 'explode' lowest 3 continents
                                    ax=ax)

        # scale the title up by 12% to match pctdistance
        ax.set_title('Distribution of gross income by Product Line', y=1.12) 

        plt.axis('equal') 

        # add legend
        ax.legend(labels=Product_Line_Gross_Income.index, loc='upper left') 
        st.pyplot()

        st.set_option('deprecation.showPyplotGlobalUse', False)
